package com.sample;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import org.apache.commons.io.FileUtils;

import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import org.jbpm.test.JbpmJUnitBaseTestCase;
import org.junit.Test;
import org.kie.api.KieServices;
import org.kie.api.logger.KieRuntimeLogger;
import org.kie.api.runtime.KieSession;
import org.kie.api.runtime.manager.RuntimeEngine;
import org.kie.api.runtime.manager.RuntimeManager;
import org.kie.api.runtime.process.ProcessInstance;
import org.kie.api.task.TaskService;
import org.kie.api.task.model.TaskSummary;
import org.kie.internal.SystemEventListenerFactory;
import org.kie.services.client.api.RemoteRestRuntimeFactory;
import org.kie.services.client.api.command.RemoteRuntimeEngine;

/**
 * This is a sample test of the evaluation process.
 */
public class ProcessTestRun extends JbpmJUnitBaseTestCase {

	//@Test
	public static void main(String[] args) throws Throwable {
		
		ProcessTestRun ptr = new ProcessTestRun();
		ptr.testEvaluationProcess();
	}
	
	public void testEvaluationProcess() throws Throwable {
		
		
		//EntityManagerFactory emf = Persistence.createEntityManagerFactory("org.jbpm.evaluation");
		
		//TaskService taskService = new TaskService(emf,SystemEventListenerFactory.getSystemEventListener());

		//String deploymentId = "org.jbpm:EvaluationTest:1.0";
		String deploymentId = "org.jbpm:Evaluation:1.0";
               URL baseUrl = new URL("http://localhost:8080/jbpm-console");
               String username = "krisv";
               String password = "krisv";
               RemoteRestRuntimeFactory rFactory = new RemoteRestRuntimeFactory(deploymentId, baseUrl, username, password);
           
               RemoteRuntimeEngine engine = rFactory.newRuntimeEngine();

               //KieSession ksession = engine.getKieSession();
 
               //ProcessInstance pInstance = ksession.startProcess("evaluation");
               //long parentId = pInstance.getId();

		
		
		//RuntimeManager manager = createRuntimeManager("EvaluationTest.bpmn");
		RuntimeManager manager = createRuntimeManager("Evaluation.bpmn");

		//RuntimeEngine engine = getRuntimeEngine(null);

		KieSession ksession = engine.getKieSession();
		
		//KieRuntimeLogger log = KieServices.Factory.get().getLoggers().newThreadedFileLogger(ksession, "test", 1000);
		
		TaskService taskService = engine.getTaskService();
		
		
		// start a new process instance
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("employee", "krisv");
		params.put("reason", "Yearly performance evaluation");
		//ProcessInstance processInstance = ksession.startProcess("com.sample.evaluation", params);
		ProcessInstance processInstance = ksession.startProcess("evaluation", params);
		System.out.println("Process started ...");
		
		// complete Self Evaluation
		List<TaskSummary> tasks = taskService.getTasksAssignedAsPotentialOwner("krisv", "en-UK");
		
		System.out.println("size=="+tasks.size());
		
		assertEquals(1, tasks.size());
		TaskSummary task = tasks.get(0);
		System.out.println("'krisv' completing task " + task.getName() + ": " + task.getDescription());
		taskService.start(task.getId(), "krisv");
		Map<String, Object> results = new HashMap<String, Object>();
		results.put("performance", "exceeding");
		taskService.complete(task.getId(), "krisv", results);
		
		// john from HR
		tasks = taskService.getTasksAssignedAsPotentialOwner("john", "en-UK");
		System.out.println("john size=="+tasks.size());
		System.out.println("task=="+tasks);
		assertEquals(1, tasks.size());
		task = tasks.get(1);
		System.out.println("'john' completing task " + task.getName() + ": " + task.getDescription());
		taskService.claim(task.getId(), "john");
		taskService.start(task.getId(), "john");
		results = new HashMap<String, Object>();
		results.put("performance", "acceptable");
		taskService.complete(task.getId(), "john", results);
		
		// mary from PM
		tasks = taskService.getTasksAssignedAsPotentialOwner("mary", "en-UK");
		//assertEquals(1, tasks.size());
		task = tasks.get(2);
		System.out.println("'mary' completing task " + task.getName() + ": " + task.getDescription());
		taskService.claim(task.getId(), "mary");
		taskService.start(task.getId(), "mary");
		results = new HashMap<String, Object>();
		results.put("performance", "outstanding");
		taskService.complete(task.getId(), "mary", results);
		
		assertProcessInstanceCompleted(processInstance.getId(), ksession);
		System.out.println("Process instance completed");
		//log.close();
		
		manager.disposeRuntimeEngine(engine);
		manager.close();
	}
/*
	public void ProcessTest() {
		super(true, true);
	}
	*/
	
	public static int downloadBrief() throws IOException{

		String uri = "http://localhost/docs/1993435.pdf";
		URL url = new URL(uri);
		File destination = new File("/tmp/testbrief.pdf");
		
		try{
			
			FileUtils.copyURLToFile(url, destination);
		}
		catch(Exception e){
			
			System.err.println(e.toString() +"caught while running downloadBrief().");
			return(1);
			
		}
			return(0);
		
	}//end downloadBrief
	
} 